// Generated by diesel_ext
#![allow(unused)]
#![allow(clippy::all)]
use crate::schema::game_reviews;
// use field_accessor::FieldAccessor;
use diesel::prelude::*;

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pk)]
pub struct GameReview {
    pub pk: String,
    pub game_id: Option<String>,
    pub game_name: Option<String>,
    pub author_id: Option<String>,
    pub playtime: Option<i32>,
    pub weighted_vote_score: Option<f64>,
    pub author_recommended_game: Option<bool>,
    pub review_text: Option<String>,
    pub sentiment: Option<f64>,
    pub fun: Option<f64>,
    pub story: Option<f64>,
    pub gameplay: Option<f64>,
    pub graphics: Option<f64>,
    pub combat: Option<f64>,
    pub easy: Option<f64>,
    pub characters: Option<f64>,
    pub music: Option<f64>,
    pub world: Option<f64>,
    pub interesting: Option<f64>,
    pub simple: Option<f64>,
    pub short: Option<f64>,
    pub mechanics: Option<f64>,
    pub achievements: Option<f64>,
    pub difficulty: Option<f64>,
    pub puzzles: Option<f64>,
    pub friends: Option<f64>,
    pub fast: Option<f64>,
    pub original: Option<f64>,
    pub unique: Option<f64>,
    pub community: Option<f64>,
    pub space: Option<f64>,
    pub beautiful: Option<f64>,
    pub challenging: Option<f64>,
    pub strategy: Option<f64>,
    pub soundtrack: Option<f64>,
    pub fps: Option<f64>,
    pub funny: Option<f64>,
    pub horror: Option<f64>,
    pub dungeon: Option<f64>,
    pub shooter: Option<f64>,
    pub atmosphere: Option<f64>,
    pub crafting: Option<f64>,
    pub guns: Option<f64>,
    pub simulator: Option<f64>,
    pub upgrades: Option<f64>,
    pub zombies: Option<f64>,
    pub adventure: Option<f64>,
    pub casual: Option<f64>,
    pub monsters: Option<f64>,
    pub grinding: Option<f64>,
    pub satisfying: Option<f64>,
    pub magic: Option<f64>,
    pub deep: Option<f64>,
    pub sad: Option<f64>,
    pub platformer: Option<f64>,
    pub animation: Option<f64>,
    pub fantasy: Option<f64>,
    pub customization: Option<f64>,
    pub exploration: Option<f64>,
    pub addictive: Option<f64>,
    pub tactical: Option<f64>,
}

impl GameReview {
    pub fn get(self: &GameReview, attr: String) -> f64 {
        let attr_str = attr.as_str();
        match attr_str {
            "author_recommended_game" => {
                let result = self.author_recommended_game.unwrap();
                if result == true {
                    1.0
                } else {
                    0.5
                }
            },
            "sentiment" => self.sentiment.unwrap(),
            "fun" => self.fun.unwrap(),
            "story" => self.story.unwrap(),
            "gameplay" => self.gameplay.unwrap(),
            "graphics" => self.graphics.unwrap(),
            "combat" => self.combat.unwrap(),
            "easy" => self.easy.unwrap(),
            "characters" => self.characters.unwrap(),
            "music" => self.music.unwrap(),
            "world" => self.world.unwrap(),
            "interesting" => self.interesting.unwrap(),
            "simple" => self.simple.unwrap(),
            "short" => self.short.unwrap(),
            "mechanics" => self.mechanics.unwrap(),
            "achievements" => self.achievements.unwrap(),
            "difficulty" => self.difficulty.unwrap(),
            "puzzles" => self.puzzles.unwrap(),
            "friends" => self.friends.unwrap(),
            "fast" => self.fast.unwrap(),
            "original" => self.original.unwrap(),
            "unique" => self.unique.unwrap(),
            "community" => self.community.unwrap(),
            "space" => self.space.unwrap(),
            "beautiful" => self.beautiful.unwrap(),
            "challenging" => self.challenging.unwrap(),
            "strategy" => self.strategy.unwrap(),
            "soundtrack" => self.soundtrack.unwrap(),
            "fps" => self.fps.unwrap(),
            "funny" => self.funny.unwrap(),
            "horror" => self.horror.unwrap(),
            "dungeon" => self.dungeon.unwrap(),
            "shooter" => self.shooter.unwrap(),
            "atmosphere" => self.atmosphere.unwrap(),
            "crafting" => self.crafting.unwrap(),
            "guns" => self.guns.unwrap(),
            "simulator" => self.simulator.unwrap(),
            "upgrades" => self.upgrades.unwrap(),
            "zombies" => self.zombies.unwrap(),
            "adventure" => self.adventure.unwrap(),
            "casual" => self.casual.unwrap(),
            "monsters" => self.monsters.unwrap(),
            "grinding" => self.grinding.unwrap(),
            "satisfying" => self.satisfying.unwrap(),
            "magic" => self.magic.unwrap(),
            "deep" => self.deep.unwrap(),
            "sad" => self.sad.unwrap(),
            "platformer" => self.platformer.unwrap(),
            "animation" => self.animation.unwrap(),
            "fantasy" => self.fantasy.unwrap(),
            "customization" => self.customization.unwrap(),
            "exploration" => self.exploration.unwrap(),
            "addictive" => self.addictive.unwrap(),
            "tactical" => self.tactical.unwrap(),
            _ => {
                // println!("{} not in GameReview struct", attr);
                0.0
            }
        }
    }
}